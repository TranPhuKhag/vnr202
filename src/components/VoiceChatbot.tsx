import { useState, useRef } from "react";
import { GeminiClient } from "../services/GeminiClient";
import { motion, AnimatePresence } from "framer-motion";
import ReactMarkdown from "react-markdown";

// ‚ö†Ô∏è Khuy·∫øn ngh·ªã: d√πng bi·∫øn m√¥i tr∆∞·ªùng cho API key
const gemini = new GeminiClient("AIzaSyBOyExUS1i0kvI7jhV7MuYl1na1nLI4wNg");

const VoiceChatbot: React.FC = () => {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<
    { role: "user" | "bot"; text: string }[]
  >([]);
  const [speaking, setSpeaking] = useState(false);
  const [tab, setTab] = useState<"text" | "voice">("text");
  const [loading, setLoading] = useState(false);
  const [modalText, setModalText] = useState<string | null>(null);
  const [copyText, setCopyText] = useState<string>("Copy");

  // Gi·ªØ 1 utterance ref ƒë·ªÉ c√≥ th·ªÉ cancel tr∆∞·ªõc khi n√≥i m·ªõi
  const utterRef = useRef<SpeechSynthesisUtterance | null>(null);

  const handleTabChange = (newTab: "text" | "voice") => {
    if (loading) return;
    // D·ª´ng n√≥i khi ƒë·ªïi tab
    if (typeof window !== "undefined" && "speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setSpeaking(false);
    }
    setTab(newTab);
    setInput("");
    setMessages([]);
    setLoading(false);
  };

  const speak = (text: string) => {
    if (typeof window !== "undefined" && "speechSynthesis" in window) {
      // h·ªßy utter tr∆∞·ªõc ƒë√≥ n·∫øu c√≤n
      window.speechSynthesis.cancel();
      setSpeaking(true);
      const utter = new window.SpeechSynthesisUtterance(text);
      utter.lang = "vi-VN";
      utter.rate = 1;
      utter.onend = () => setSpeaking(false);
      utter.onerror = () => setSpeaking(false);
      utterRef.current = utter;
      window.speechSynthesis.speak(utter);
    }
  };

  const baseGuidelines = `
B·∫°n l√† tr·ª£ l√Ω h·ªçc thu·∫≠t cho *m√¥n L·ªãch s·ª≠ ƒê·∫£ng C·ªông S·∫£n Vi·ªát Nam*. 
‚Ä¢ C∆° s·ªü tham chi·∫øu ch√≠nh: **Gi√°o tr√¨nh T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh 2019**.
‚Ä¢ N·∫øu c√¢u h·ªèi n·∫±m ngo√†i gi√°o tr√¨nh, h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn theo ki·∫øn th·ª©c n·ªÅn t·∫£ng, v√† n√≥i r√µ l√† ‚Äún·ªôi dung ngo√†i gi√°o tr√¨nh‚Äù. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn th√¨ n√≥i ‚Äúm√¨nh ch∆∞a c√≥ ƒë·ªß cƒÉn c·ª© trong gi√°o tr√¨nh‚Äù.
‚Ä¢ Kh√¥ng b·ªãa ƒë·∫∑t, kh√¥ng suy di·ªÖn qu√° m·ª©c, kh√¥ng ƒë∆∞a s·ªë li·ªáu/ tr√≠ch d·∫´n n·∫øu kh√¥ng ch·∫Øc ch·∫Øn.
‚Ä¢ Tr·∫£ l·ªùi ho√†n to√†n b·∫±ng **ti·∫øng Vi·ªát**, ∆∞u ti√™n **ng·∫Øn g·ªçn ‚Äì s√∫c t√≠ch ‚Äì d·ªÖ hi·ªÉu**, d√πng **Markdown** g·ªçn g√†ng.
‚Ä¢ Lu√¥n c·ªë g·∫Øng ch·ªâ r√µ **Ch∆∞∆°ng/M·ª•c** trong gi√°o tr√¨nh khi c√≥ th·ªÉ (v√≠ d·ª•: ‚ÄúXem Ch∆∞∆°ng 1, m·ª•c 1.2‚Äù).
`;

  const textModeInstruction = `
Tr√¨nh b√†y c√≥ c·∫•u tr√∫c theo m·∫´u:
### T√≥m l∆∞·ª£c nhanh
- ‚Ä¶

### N·ªôi dung ch√≠nh
1) ‚Ä¶
2) ‚Ä¶

### Tham chi·∫øu gi√°o tr√¨nh
- Ch∆∞∆°ng ‚Ä¶, m·ª•c ‚Ä¶ (n·∫øu x√°c ƒë·ªãnh ƒë∆∞·ª£c)
`;

  const voiceModeInstruction = `
Tr·∫£ l·ªùi theo phong c√°ch g·∫ßn g≈©i, d·ªÖ hi·ªÉu; c√≥ th·ªÉ th√™m v√≠ d·ª• ƒë·ªùi th∆∞·ªùng/ng·∫Øn, so s√°nh vui nh∆∞ng **kh√¥ng l√†m m·∫•t t√≠nh ch√≠nh x√°c**.
Kh√¥ng vi·∫øt t·∫Øt (v√≠ d·ª•: vi·∫øt ƒë·∫ßy ƒë·ªß ‚ÄúCh·ªß nghƒ©a x√£ h·ªôi‚Äù), in ƒë·∫≠m c√°c keyword l√™n.
N·∫øu x√°c ƒë·ªãnh ƒë∆∞·ª£c, n√™u Ch∆∞∆°ng/M·ª•c ·ªü cu·ªëi c√¢u tr·∫£ l·ªùi: ‚Äú(Tham chi·∫øu: Ch∆∞∆°ng ‚Ä¶, m·ª•c ‚Ä¶)‚Äù.
`;

  const handleSend = async () => {
    if (!input.trim()) return;
    setMessages((prev) => [...prev, { role: "user", text: input }]);
    setLoading(true);

    try {
      let prompt = baseGuidelines;

      if (tab === "text") {
        prompt += `
${textModeInstruction}

**C√¢u h·ªèi c·ªßa ng∆∞·ªùi h·ªçc**:
${input}
`;
      } else {
        prompt += `
${voiceModeInstruction}
ƒê·ªëi v·ªõi c√¢u tr·∫£ l·ªùi b·∫±ng gi·ªçng n√≥i, gi·ªõi h·∫°n trong kho·∫£ng 100 - 150 t·ª´ nh∆∞ng ƒë·∫£m b·∫£o v·∫´n ƒë·∫ßy ƒë·ªß c√°c th√¥ng tin k√®m c√°c so s√°nh minh h·ªça
gi√∫p ng∆∞·ªùi nghe d·ªÖ hi·ªÉu, c·∫£m th·∫•y th√∫ v·ªã.
**C√¢u h·ªèi c·ªßa ng∆∞·ªùi h·ªçc**:
${input}
`;
      }

      const response = await gemini.ask(prompt);
      setMessages((prev) => [...prev, { role: "bot", text: response }]);

      if (tab === "voice") {
        speak(response);
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (err: any) {
      setMessages((prev) => [
        ...prev,
        { role: "bot", text: "L·ªói khi g·ªçi API: " + err.message },
      ]);
    } finally {
      setLoading(false);
      setInput("");
    }
  };

  return (
    <>
      <motion.div
        className="w-full max-w-2xl min-h-[400px] flex flex-col bg-white/80 rounded-2xl shadow-2xl p-8 backdrop-blur border border-white/30 resize-y overflow-auto transition-all duration-300"
        initial={{ opacity: 0, y: 40 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.7, delay: 0.2 }}
      >
        <h2 className="text-2xl font-bold mb-1 text-gray-800 text-center">
          Chatbot AI ‚Äì L·ªãch s·ª≠ ƒê·∫£ng C·ªông S·∫£n Vi·ªát Nam
        </h2>
        <p className="text-center text-gray-500 text-sm mb-4">
          ∆Øu ti√™n tr·∫£ l·ªùi theo <i>L·ªãch s·ª≠ ƒê·∫£ng C·ªông S·∫£n Vi·ªát Nam</i>; c√≥ th·ªÉ
          n√™u r√µ Ch∆∞∆°ng/M·ª•c khi tr√≠ch d·∫´n.
        </p>

        <div className="flex gap-4 mb-6 justify-center">
          <button
            className={`px-6 py-2 rounded-lg border font-semibold text-lg transition-all duration-200 ${
              tab === "text"
                ? "bg-blue-500 text-white shadow"
                : "bg-white text-blue-500 border-blue-500 hover:bg-blue-50"
            } ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={() => handleTabChange("text")}
            disabled={loading}
          >
            Tr·∫£ l·ªùi vƒÉn b·∫£n
          </button>
          <button
            className={`px-6 py-2 rounded-lg border font-semibold text-lg transition-all duration-200 ${
              tab === "voice"
                ? "bg-blue-500 text-white shadow"
                : "bg-white text-blue-500 border-blue-500 hover:bg-blue-50"
            } ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={() => handleTabChange("voice")}
            disabled={loading}
          >
            Tr·∫£ l·ªùi gi·ªçng n√≥i
          </button>
        </div>

        <div className="flex-1 min-h-[180px] max-h-[500px] overflow-y-auto flex flex-col gap-3 mb-6 transition-all duration-300">
          {tab === "text" ? (
            <>
              {messages.length === 0 && (
                <div className="text-gray-500 text-center mt-12 text-base select-none">
                  H√£y h·ªèi b·∫•t k·ª≥ ƒëi·ªÅu g√¨ v·ªÅ m√¥n L·ªãch s·ª≠ ƒê·∫£ng C·ªông S·∫£n Vi·ªát Nam!
                </div>
              )}
              {messages.map((msg, idx) => (
                <div
                  key={idx}
                  className={`flex items-start gap-3 ${
                    msg.role === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  {msg.role === "bot" && (
                    <span className="w-8 h-8 flex items-center justify-center rounded-full bg-gray-200">
                      ü§ñ
                    </span>
                  )}
                  <motion.div
                    className={`max-w-[85%] px-5 py-3 rounded-2xl text-base leading-relaxed shadow-sm cursor-pointer ${
                      msg.role === "user"
                        ? "bg-blue-500 text-white self-end rounded-br-none"
                        : "bg-white text-gray-900 self-start border border-gray-200 rounded-bl-none"
                    }`}
                    initial={{ opacity: 0, x: msg.role === "user" ? 40 : -40 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.3 }}
                    onClick={() => msg.role === "bot" && setModalText(msg.text)}
                  >
                    {msg.role === "user" ? (
                      msg.text
                    ) : (
                      <div className="prose prose-sm sm:prose-base lg:prose-lg max-w-none line-clamp-4">
                        <ReactMarkdown>{msg.text}</ReactMarkdown>
                      </div>
                    )}
                  </motion.div>
                  {msg.role === "user" && (
                    <span className="w-8 h-8 flex items-center justify-center rounded-full bg-blue-500 text-white">
                      üë§
                    </span>
                  )}
                </div>
              ))}
            </>
          ) : (
            <div className="flex flex-col items-center justify-center h-full min-h-[180px]">
              {speaking ? (
                <div className="flex flex-col items-center justify-center w-full h-full">
                  <span className="text-6xl mb-2 animate-pulse text-blue-500">
                    üîä
                  </span>
                  <span className="text-lg text-blue-600 font-semibold mb-4">
                    ƒêang ph√°t gi·ªçng n√≥i...
                  </span>
                  <button
                    className="px-6 py-2 rounded-lg bg-red-500 text-white font-semibold shadow hover:bg-red-600 transition"
                    onClick={() => {
                      if (
                        typeof window !== "undefined" &&
                        "speechSynthesis" in window
                      ) {
                        window.speechSynthesis.cancel();
                        setSpeaking(false);
                      }
                    }}
                  >
                    D·ª´ng n√≥i
                  </button>
                </div>
              ) : (
                <span className="text-gray-400 text-base select-none">
                  Nh·∫≠p c√¢u h·ªèi ƒë·ªÉ nghe tr·∫£ l·ªùi b·∫±ng gi·ªçng n√≥i!
                </span>
              )}
            </div>
          )}
        </div>

        <div className="flex items-center gap-3 mt-auto">
          <input
            className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white text-base"
            placeholder="Nh·∫≠p c√¢u h·ªèi..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSend()}
            disabled={loading}
          />
          <button
            className="p-3 rounded-full bg-blue-500 hover:bg-blue-600 transition text-white shadow disabled:opacity-60 disabled:cursor-not-allowed"
            onClick={handleSend}
            aria-label="Send"
            disabled={loading || !input.trim()}
          >
            {loading ? (
              <span className="w-5 h-5 animate-spin border-2 border-white border-t-transparent rounded-full inline-block"></span>
            ) : (
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M22 2L11 13"
                ></path>
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M22 2L15 22l-4-9-9-4 20-7z"
                ></path>
              </svg>
            )}
          </button>
        </div>
      </motion.div>

      <AnimatePresence>
        {modalText && (
          <motion.div
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setModalText(null)}
          >
            <motion.div
              className="bg-white rounded-2xl shadow-2xl max-w-3xl w-full max-h-[80vh] overflow-y-auto p-6 relative"
              initial={{ scale: 0.8, opacity: 0, y: 30 }}
              animate={{
                scale: 1,
                opacity: 1,
                y: 0,
                transition: { type: "spring", stiffness: 200, damping: 20 },
              }}
              exit={{ scale: 0.8, opacity: 0, y: 30 }}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="border-b pb-3 mb-4 flex justify-between items-center">
                <h2 className="text-xl font-semibold text-gray-800">
                  Gi·∫£i th√≠ch chi ti·∫øt
                </h2>
                <div className="flex gap-2">
                  <button
                    className="px-3 py-1 text-sm rounded-lg bg-gray-100 hover:bg-gray-200"
                    onClick={() => {
                      navigator.clipboard.writeText(modalText);
                      setCopyText("Copied!");
                      setTimeout(() => setCopyText("Copy"), 2000);
                    }}
                  >
                    {copyText}
                  </button>
                  <button
                    className="text-gray-400 hover:text-gray-600"
                    onClick={() => setModalText(null)}
                  >
                    ‚úñ
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="prose prose-lg max-w-none leading-relaxed text-gray-700">
                <ReactMarkdown>{modalText}</ReactMarkdown>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default VoiceChatbot;
